{"name": "test_click_events", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=140.0.7339.208)\nStacktrace:\n\tGetHandleVerifier [0x0xc2c333+65459]\n\tGetHandleVerifier [0x0xc2c374+65524]\n\t(No symbol) [0x0xa4d973]\n\t(No symbol) [0x0xa2c19d]\n\t(No symbol) [0x0xac059e]\n\t(No symbol) [0x0xa6f904]\n\t(No symbol) [0x0xab9bf6]\n\t(No symbol) [0x0xa8b38e]\n\t(No symbol) [0x0xa8c274]\n\tGetHandleVerifier [0x0xeaeda3+2697763]\n\tGetHandleVerifier [0x0xea9ec7+2677575]\n\tGetHandleVerifier [0x0xc54194+228884]\n\tGetHandleVerifier [0x0xc449f8+165496]\n\tGetHandleVerifier [0x0xc4b18d+192013]\n\tGetHandleVerifier [0x0xc347d8+99416]\n\tGetHandleVerifier [0x0xc34972+99826]\n\tGetHandleVerifier [0x0xc1ebea+10346]\n\tBaseThreadInitThunk [0x0x7570fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x7761809e+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7761806e+238]", "trace": "self = <automation_project.tests.test_click_events.TestClickEvents object at 0x0000024DB25C13D0>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"134c00ce85890619ad364756152962ac\")>\n\n    @allure.story(\"Test different click events\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_click_events(self, driver):\n        click_page = ClickEventsPage(driver)\n    \n        with allure.step(\"Open click events page\"): # type: ignore\n>           click_page.open_click_events_page()\n\ntests\\test_click_events.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\click_events_page.py:16: in open_click_events_page\n    self.open_url(\"https://practice-automation.com/click-events/\")\npages\\base_page.py:112: in open_url\n    self.wait_for_page_load()\npages\\base_page.py:42: in wait_for_page_load\n    self.handle_alert(1)\npages\\base_page.py:27: in handle_alert\n    alert = WebDriverWait(self.driver, timeout).until(EC.alert_is_present())\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:856: in _predicate\n    return driver.switch_to.alert\n           ^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:55: in alert\n    _ = alert.text\n        ^^^^^^^^^^\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\common\\alert.py:58: in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024DB4217D10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...tRtlGetAppContainerNamedObjectPath [0x0x7761809e+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7761806e+238]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=140.0.7339.208)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xc2c333+65459]\nE       \tGetHandleVerifier [0x0xc2c374+65524]\nE       \t(No symbol) [0x0xa4d973]\nE       \t(No symbol) [0x0xa2c19d]\nE       \t(No symbol) [0x0xac059e]\nE       \t(No symbol) [0x0xa6f904]\nE       \t(No symbol) [0x0xab9bf6]\nE       \t(No symbol) [0x0xa8b38e]\nE       \t(No symbol) [0x0xa8c274]\nE       \tGetHandleVerifier [0x0xeaeda3+2697763]\nE       \tGetHandleVerifier [0x0xea9ec7+2677575]\nE       \tGetHandleVerifier [0x0xc54194+228884]\nE       \tGetHandleVerifier [0x0xc449f8+165496]\nE       \tGetHandleVerifier [0x0xc4b18d+192013]\nE       \tGetHandleVerifier [0x0xc347d8+99416]\nE       \tGetHandleVerifier [0x0xc34972+99826]\nE       \tGetHandleVerifier [0x0xc1ebea+10346]\nE       \tBaseThreadInitThunk [0x0x7570fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7761809e+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7761806e+238]\n\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "steps": [{"name": "Open click events page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=140.0.7339.208)\nStacktrace:\n\tGetHandleVerifier [0x0xc2c333+65459]\n\tGetHandleVerifier [0x0xc2c374+65524]\n\t(No symbol) [0x0xa4d973]\n\t(No symbol) [0x0xa2c19d]\n\t(No symbol) [0x0xac059e]\n\t(No symbol) [0x0xa6f904]\n\t(No symbol) [0x0xab9bf6]\n\t(No symbol) [0x0xa8b38e]\n\t(No symbol) [0x0xa8c274]\n\tGetHandleVerifier [0x0xeaeda3+2697763]\n\tGetHandleVerifier [0x0xea9ec7+2677575]\n\tGetHandleVerifier [0x0xc54194+228884]\n\tGetHandleVerifier [0x0xc449f8+165496]\n\tGetHandleVerifier [0x0xc4b18d+192013]\n\tGetHandleVerifier [0x0xc347d8+99416]\n\tGetHandleVerifier [0x0xc34972+99826]\n\tGetHandleVerifier [0x0xc1ebea+10346]\n\tBaseThreadInitThunk [0x0x7570fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x7761809e+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7761806e+238]\n\n", "trace": "  File \"C:\\Users\\Fr0z3n556\\Desktop\\automation_project\\tests\\test_click_events.py\", line 18, in test_click_events\n    click_page.open_click_events_page()\n  File \"C:\\Users\\Fr0z3n556\\Desktop\\automation_project\\pages\\click_events_page.py\", line 16, in open_click_events_page\n    self.open_url(\"https://practice-automation.com/click-events/\")\n  File \"C:\\Users\\Fr0z3n556\\Desktop\\automation_project\\pages\\base_page.py\", line 112, in open_url\n    self.wait_for_page_load()\n  File \"C:\\Users\\Fr0z3n556\\Desktop\\automation_project\\pages\\base_page.py\", line 42, in wait_for_page_load\n    self.handle_alert(1)\n  File \"C:\\Users\\Fr0z3n556\\Desktop\\automation_project\\pages\\base_page.py\", line 27, in handle_alert\n    alert = WebDriverWait(self.driver, timeout).until(EC.alert_is_present())\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Fr0z3n556\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 129, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Fr0z3n556\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 856, in _predicate\n    return driver.switch_to.alert\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Fr0z3n556\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\switch_to.py\", line 55, in alert\n    _ = alert.text\n        ^^^^^^^^^^\n  File \"C:\\Users\\Fr0z3n556\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\common\\alert.py\", line 58, in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Fr0z3n556\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Fr0z3n556\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1758997023803, "stop": 1758997040293}], "attachments": [{"name": "stdout", "source": "4990c761-4f1d-4929-94a5-6da04e6d74c6-attachment.txt", "type": "text/plain"}], "start": 1758997023803, "stop": 1758997040302, "uuid": "0fcc0fd0-e77b-4e0e-905b-9387429da26c", "historyId": "d411aff5b7f41245e296c335cdbd1bc0", "testCaseId": "d411aff5b7f41245e296c335cdbd1bc0", "fullName": "tests.test_click_events.TestClickEvents#test_click_events", "labels": [{"name": "feature", "value": "Click Events"}, {"name": "severity", "value": "normal"}, {"name": "story", "value": "Test different click events"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_click_events"}, {"name": "subSuite", "value": "TestClickEvents"}, {"name": "host", "value": "MakuOSPC"}, {"name": "thread", "value": "23436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_click_events"}], "titlePath": ["tests", "test_click_events.py", "TestClickEvents"]}